"""updates to timestamps

Revision ID: 5e8ac6e9ff0e
Revises: c8f87162f831
Create Date: 2025-03-31 04:07:29.092431

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "5e8ac6e9ff0e"
down_revision = "c8f87162f831"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "group",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "group",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.create_index(op.f("ix_group_created_at"), "group", ["created_at"], unique=False)
    op.create_index(op.f("ix_group_updated_at"), "group", ["updated_at"], unique=False)
    op.alter_column(
        "invitation",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "invitation",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "invitation",
        "user_expiry_date",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "invitation",
        "expires_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.create_index(
        op.f("ix_invitation_created_at"), "invitation", ["created_at"], unique=False
    )
    op.create_index(
        op.f("ix_invitation_updated_at"), "invitation", ["updated_at"], unique=False
    )
    op.alter_column(
        "notification",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "notification",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.create_index(
        op.f("ix_notification_created_at"), "notification", ["created_at"], unique=False
    )
    op.create_index(
        op.f("ix_notification_updated_at"), "notification", ["updated_at"], unique=False
    )
    op.alter_column(
        "password_reset",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "password_reset",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.create_index(
        op.f("ix_password_reset_created_at"),
        "password_reset",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_password_reset_updated_at"),
        "password_reset",
        ["updated_at"],
        unique=False,
    )
    op.alter_column(
        "transactions", "description", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column(
        "user",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.create_index(op.f("ix_user_created_at"), "user", ["created_at"], unique=False)
    op.create_index(op.f("ix_user_updated_at"), "user", ["updated_at"], unique=False)
    op.alter_column(
        "user_settings",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "user_settings",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.create_index(
        op.f("ix_user_settings_created_at"),
        "user_settings",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_settings_updated_at"),
        "user_settings",
        ["updated_at"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_user_settings_updated_at"), table_name="user_settings")
    op.drop_index(op.f("ix_user_settings_created_at"), table_name="user_settings")
    op.alter_column(
        "user_settings",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "user_settings",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_user_updated_at"), table_name="user")
    op.drop_index(op.f("ix_user_created_at"), table_name="user")
    op.alter_column(
        "user",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "user",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "transactions", "description", existing_type=sa.VARCHAR(), nullable=False
    )
    op.drop_index(op.f("ix_password_reset_updated_at"), table_name="password_reset")
    op.drop_index(op.f("ix_password_reset_created_at"), table_name="password_reset")
    op.alter_column(
        "password_reset",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "password_reset",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_notification_updated_at"), table_name="notification")
    op.drop_index(op.f("ix_notification_created_at"), table_name="notification")
    op.alter_column(
        "notification",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "notification",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_invitation_updated_at"), table_name="invitation")
    op.drop_index(op.f("ix_invitation_created_at"), table_name="invitation")
    op.alter_column(
        "invitation",
        "expires_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "invitation",
        "user_expiry_date",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
    )
    op.alter_column(
        "invitation",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "invitation",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_group_updated_at"), table_name="group")
    op.drop_index(op.f("ix_group_created_at"), table_name="group")
    op.alter_column(
        "group",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "group",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    # ### end Alembic commands ###

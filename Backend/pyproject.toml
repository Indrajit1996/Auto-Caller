[project]
name = "app"
version = "2.2.1"
description = "Keystone Backend API"
requires-python = ">=3.10,<4.0"
dependencies = [
    "fastapi[standard]<1.0.0,>=0.114.2",
    "python-multipart<1.0.0,>=0.0.7",
    "email-validator>=2.1.0.post1,<3.0.0.0",
    "passlib[bcrypt]<2.0.0,>=1.7.4",
    "tenacity<9.0.0,>=8.2.3",
    "pydantic>2.0",
    "emails<1.0,>=0.6",
    "jinja2<4.0.0,>=3.1.4",
    "alembic<2.0.0,>=1.12.1",
    "httpx>=0.25.1,<1.0.0",
    "psycopg[binary]>=3.1.13,<4.0.0",
    "sqlmodel<1.0.0,>=0.0.24",
    # Pin bcrypt until passlib supports the latest
    "bcrypt==4.0.1",
    "pydantic-settings<3.0.0,>=2.2.1",
    "sentry-sdk[fastapi]<2.0.0,>=1.40.6",
    "pyjwt<3.0.0,>=2.8.0",
    "pytz>=2024.2",
    "loguru>=0.7.3",
    "apscheduler",
    "fastapi-cache2[redis]>=0.2.2",
    "asyncpg>=0.30.0",
    "typer>=0.15.2",
    "python-dotenv>=1.1.0",
    "sqlalchemy[asyncio]>=2.0.40",
    "aiofiles>=24.1.0",
    "pandas>=2.2.3",
]

[project.scripts]
kcli = "cli:app"

[tool.uv]
dev-dependencies = [
    "pytest<8.0.0,>=7.4.3",
    "mypy<2.0.0,>=1.8.0",
    "ruff<1.0.0,>=0.2.2",
    "types-passlib<2.0.0.0,>=1.7.7.20240106",
    "coverage<8.0.0,>=7.4.3",
    "pytest-cov>=6.0.0",
    "factory-boy>=3.3.3",
    "pandas-stubs>=2.2.3.250308",
    "types-pymysql>=1.1.0.20241103",
    "types-pyyaml>=6.0.12.20250402",
    "types-pygments>=2.19.0.20250305",
    "types-aiofiles>=24.1.0.20250326",
    "types-colorama>=0.4.15.20240311",
    "types-gevent>=24.11.0.20250401",
    "types-greenlet>=3.1.0.20250401",
    "types-pexpect>=4.9.0.20241208",
    "types-psycopg2>=2.9.21.20250318",
    "types-python-dateutil>=2.9.0.20241206",
    "types-setuptools>=78.1.0.20250329",
    "types-ujson>=5.10.0.20250326",
    "pytest-html>=4.1.1",
    "freezegun>=1.5.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.coverage.run]
source = ["app"]
omit = [
    "*/migrations/*",
    "*/cli/*",
    "*/tests/*",
    "*/schemas/*",
    "*/settings.py",
    "*/config.py",
]

concurrency = ["greenlet", "thread", "multiprocessing"]
cover_pylib = false

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
